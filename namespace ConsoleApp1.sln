namespace ConsoleApp1;

public class Class1
{
    
}
using System;
using System.ComponentModel.DataAnnotations;

namespace YourNamespace.Models
{
    public class Insuree
    {
        public int Id { get; set; }

        [Required]
        public string FirstName { get; set; }

        [Required]
        public string LastName { get; set; }

        [Required]
        public string EmailAddress { get; set; }

        [Required]
        [Display(Name = "Date of Birth")]
        public DateTime DateOfBirth { get; set; }

        [Required]
        [Display(Name = "Car Year")]
        public int CarYear { get; set; }

        [Required]
        public string CarMake { get; set; }

        [Required]
        public string CarModel { get; set; }

        [Required]
        [Display(Name = "Speeding Tickets")]
        public int SpeedingTickets { get; set; }

        [Required]
        public bool DUI { get; set; }

        [Required]
        public bool CoverageType { get; set; } // True for full coverage, false for liability.

        public decimal Quote { get; set; } // This will be calculated
    }
}
using System.Data.Entity;

namespace YourNamespace.Models
{
    public class InsuranceContext : DbContext
    {
        public DbSet<Insuree> Insurees { get; set; }
    }
}
using System.Data.Entity;

namespace YourNamespace.Models
{
    public class InsuranceContext : DbContext
    {
        public DbSet<Insuree> Insurees { get; set; }
    }
}
Enable-Migrations
Add-Migration InitialCreate
Update-Database
using System;
using System.Linq;
using System.Net;
using System.Web.Mvc;
using YourNamespace.Models;

namespace YourNamespace.Controllers
{
    public class InsureeController : Controller
    {
        private InsuranceContext db = new InsuranceContext();

        // GET: Insuree/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Insuree/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "Id,FirstName,LastName,EmailAddress,DateOfBirth,CarYear,CarMake,CarModel,SpeedingTickets,DUI,CoverageType")] Insuree insuree)
        {
            if (ModelState.IsValid)
            {
                insuree.Quote = CalculateQuote(insuree);
                db.Insurees.Add(insuree);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(insuree);
        }

        private decimal CalculateQuote(Insuree insuree)
        {
            decimal quote = 50m; // Base amount

            // Calculate age
            int age = DateTime.Now.Year - insuree.DateOfBirth.Year;
            if (insuree.DateOfBirth > DateTime.Now.AddYears(-age)) age--;

            // Age-based charges
            if (age <= 18) quote += 100m;
            else if (age >= 19 && age <= 25) quote += 50m;
            else quote += 25m;

            // Car year-based charges
            if (insuree.CarYear < 2000) quote += 25m;
            else if (insuree.CarYear > 2015) quote += 25m;

            // Car make and model-based charges
            if (insuree.CarMake.ToLower() == "porsche")
            {
                quote += 25m;
                if (insuree.CarModel.ToLower() == "911 carrera")
                {
                    quote += 25m; // Additional charge for Porsche 911 Carrera
                }
            }

            // Add $10 for each speeding ticket
            quote += insuree.SpeedingTickets * 10m;

            // Add 25% for DUI
            if (insuree.DUI) quote *= 1.25m;

            // Add 50% if it's full coverage
            if (insuree.CoverageType) quote *= 1.5m;

            return quote;
        }

        // Other methods (Index, Edit, Delete, etc.) would go here
    }
}
@Html.EditorFor(model => model.Quote)
@Html.HiddenFor(model => model.Quote)
public ActionResult Admin()
{
    var insurees = db.Insurees.ToList();
    return View(insurees);
}
@model IEnumerable<YourNamespace.Models.Insuree>

<table class="table">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email Address</th>
            <th>Quote</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var item in Model)
    {
        <tr>
            <td>@item.FirstName</td>
            <td>@item.LastName</td>
            <td>@item.EmailAddress</td>
            <td>@item.Quote</td>
        </tr>
    }
    </tbody>
</table>
